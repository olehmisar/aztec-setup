name: 'Aztec Test Runner'
description: 'Run tests using the Aztec TXE'
inputs:
  enable-caching:
    description: 'Enable Docker image caching (default: true)'
    required: false
    default: 'true'
  aztec-version:
    description: 'Aztec Version'
    required: false
    default: '0.71.0'
  workdir:
    description: 'Working directory for tests'
    required: false
    default: ${{ github.workspace }}
  test-args:
    description: 'Arguments to pass to the test command'
    required: false
    default: 'test --silence-warnings --oracle-resolver http://txe:8081'
  nargo-timeout:
    description: 'Timeout for Nargo foreign calls (in milliseconds)'
    required: false
    default: '300000'

runs:
  using: "composite"
  steps:
    - name: Response Cached Images
      if: inputs.enable-caching == 'true'
      id: cache-docker-aztec
      uses: actions/cache@v3
      with:
          path: ci/cache/docker/aztec
          key: cache-docker-aztec-${{ inputs.aztec-version }}

    - name: Cache Miss
      if: inputs.enable-caching == 'true' && steps.cache-docker-aztec.outputs.cache-hit != 'true'
      shell: bash
      run: |
        docker pull aztecprotocol/aztec:${{ inputs.aztec-version }}
        docker pull aztecprotocol/aztec-nargo:${{ inputs.aztec-version }}
        mkdir -p ci/cache/docker/aztec
        docker image save aztecprotocol/aztec:${{ inputs.aztec-version }} --output ./ci/cache/docker/aztec/aztec-${{ inputs.aztec-version }}.tar
        docker image save aztecprotocol/aztec-nargo:${{ inputs.aztec-version }} --output ./ci/cache/docker/aztec/aztec-nargo-${{ inputs.aztec-version }}.tar

    - name: Cache Hit
      if: inputs.enable-caching == 'true' && steps.cache-docker-aztec.outputs.cache-hit == 'true'
      shell: bash
      run: |
        docker image load --input ./ci/cache/docker/aztec/aztec-${{ inputs.aztec-version }}.tar
        docker image load --input ./ci/cache/docker/aztec/aztec-nargo-${{ inputs.aztec-version }}.tar

    - name: Run Tests
      shell: bash
      run: |
        ABS_WORKDIR=$(realpath "${{ inputs.workdir }}")
        ENV_FILE=${{ github.action_path }}/.env
        echo "AZTEC_VERSION=${{ inputs.aztec-version }}" > $ENV_FILE
        echo "WORKDIR=$ABS_WORKDIR" >> $ENV_FILE
        echo "TEST_ARGS=${{ inputs.test-args }}" >> $ENV_FILE
        echo "NARGO_TIMEOUT=${{ inputs.nargo-timeout }}" >> $ENV_FILE

        docker compose -f ${{ github.action_path }}/docker-compose.yml up \
          --force-recreate \
          --remove-orphans \
          --abort-on-container-exit \
          --exit-code-from aztec-nargo

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        docker compose -f ${{ github.action_path }}/docker-compose.yml down --remove-orphans
